"""add_air_quality_order_of_payment_table

Revision ID: 34e55b12cc90
Revises: add_order_of_payment_simple
Create Date: 2025-08-23 03:00:19.206116

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '34e55b12cc90'
down_revision: Union[str, None] = 'add_order_of_payment_simple'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('order_of_payments',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('oop_control_number', sa.String(length=6), nullable=False),
    sa.Column('plate_number', sa.String(length=32), nullable=False),
    sa.Column('operator_name', sa.String(length=200), nullable=False),
    sa.Column('driver_name', sa.String(length=200), nullable=True),
    sa.Column('selected_violations', sa.String(), nullable=False),
    sa.Column('testing_officer', sa.String(length=200), nullable=True),
    sa.Column('test_results', sa.String(), nullable=True),
    sa.Column('date_of_testing', sa.Date(), nullable=True),
    sa.Column('apprehension_fee', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('voluntary_fee', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('impound_fee', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('driver_amount', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('operator_fee', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('total_undisclosed_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('grand_total_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('payment_or_number', sa.String(length=64), nullable=True),
    sa.Column('date_of_payment', sa.Date(), nullable=False),
    sa.Column('status', sa.String(length=32), server_default='pending', nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('oop_control_number'),
    schema='air_quality'
    )
    op.create_index('idx_air_quality_oop_control_number', 'order_of_payments', ['oop_control_number'], unique=False, schema='air_quality')
    op.create_index('idx_air_quality_oop_date', 'order_of_payments', ['date_of_payment'], unique=False, schema='air_quality')
    op.create_index('idx_air_quality_oop_plate', 'order_of_payments', ['plate_number'], unique=False, schema='air_quality')
    op.create_table('sapling_records',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('species', sa.String(length=100), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('collection_date', sa.Date(), nullable=False),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.Column('condition', sa.String(length=50), nullable=False),
    sa.Column('planting_date', sa.Date(), nullable=True),
    sa.Column('location', sa.String(length=500), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_sapling_condition', 'sapling_records', ['condition'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_sapling_source', 'sapling_records', ['source'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_sapling_species', 'sapling_records', ['species'], unique=False, schema='urban_greening')
    op.create_table('tree_records',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('species', sa.String(length=100), nullable=False),
    sa.Column('location', sa.String(length=500), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('diameter', sa.Integer(), nullable=False),
    sa.Column('height', sa.Float(), nullable=False),
    sa.Column('condition', sa.String(length=50), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('permit_number', sa.String(length=50), nullable=True),
    sa.Column('action_date', sa.Date(), nullable=True),
    sa.Column('replacement_required', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_tree_action', 'tree_records', ['action'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_tree_condition', 'tree_records', ['condition'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_tree_species', 'tree_records', ['species'], unique=False, schema='urban_greening')
    op.create_table('urban_greening_projects',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('project_name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('species', sa.String(length=255), nullable=False),
    sa.Column('planting_date', sa.Date(), nullable=False),
    sa.Column('location', sa.String(length=500), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('responsible_person', sa.String(length=255), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_project_date', 'urban_greening_projects', ['planting_date'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_project_status', 'urban_greening_projects', ['status'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_project_type', 'urban_greening_projects', ['type'], unique=False, schema='urban_greening')
    op.alter_column('profiles', 'bio',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='auth')
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.drop_index(op.f('profiles_user_id_key'), table_name='profiles', schema='auth')
    op.create_unique_constraint(None, 'profiles', ['user_id'], schema='auth')
    op.alter_column('user_roles', 'role',
               existing_type=postgresql.ENUM('admin', 'air_quality', 'tree_management', 'government_emission', name='user_role', schema='auth'),
               type_=sa.Enum('admin', 'air_quality', 'tree_management', 'government_emission', name='user_role_enum_auth', schema='auth'),
               existing_nullable=False,
               schema='auth')
    op.alter_column('user_roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.drop_index(op.f('user_roles_user_id_role_unique'), table_name='user_roles', schema='auth')
    op.create_unique_constraint('uq_user_roles_user_id_role', 'user_roles', ['user_id', 'role'], schema='auth')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.drop_index(op.f('users_email_key'), table_name='users', schema='auth')
    op.create_index(op.f('ix_auth_users_email'), 'users', ['email'], unique=True, schema='auth')
    op.drop_index(op.f('ix_emission_air_quality_fees_fee_id'), table_name='air_quality_fees', schema='emission')
    op.create_index(op.f('ix_emission_air_quality_fees_fee_id'), 'air_quality_fees', ['fee_id'], unique=False, schema='emission')
    op.alter_column('test_schedules', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('test_schedules', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('tests', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('tests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicle_driver_history', 'changed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.drop_index(op.f('vehicles_plate_number_key'), table_name='vehicles', schema='emission')
    op.create_unique_constraint(None, 'vehicles', ['plate_number'], schema='emission')
    op.alter_column('fee_records', 'reference_number',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Unique reference number for the fee record',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Type of fee: cutting_permit, pruning_permit, violation_fine',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'amount',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment=None,
               existing_comment='Fee amount in currency units',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'payer_name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Name of the person or entity paying the fee',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Date when the fee was issued',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'due_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Date when the fee payment is due',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'status',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Payment status: paid, pending, overdue, cancelled',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'or_number',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Official Receipt number (when paid)',
               existing_nullable=True,
               schema='urban_greening')
    op.alter_column('fee_records', 'payment_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Date when the fee was actually paid',
               existing_nullable=True,
               schema='urban_greening')
    op.drop_index(op.f('idx_urban_greening_fee_due_date'), table_name='fee_records', schema='urban_greening')
    op.drop_index(op.f('idx_urban_greening_fee_payer'), table_name='fee_records', schema='urban_greening')
    op.drop_index(op.f('idx_urban_greening_fee_reference_number'), table_name='fee_records', schema='urban_greening')
    op.drop_table_comment(
        'fee_records',
        existing_comment='Fee records for urban greening activities including permits and violations',
        schema='urban_greening'
    )
    op.alter_column('monitoring_requests', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               schema='urban_greening')
    op.create_index(op.f('ix_urban_greening_monitoring_requests_id'), 'monitoring_requests', ['id'], unique=False, schema='urban_greening')
    op.drop_column('monitoring_requests', 'latitude', schema='urban_greening')
    op.drop_column('monitoring_requests', 'notes', schema='urban_greening')
    op.drop_column('monitoring_requests', 'updated_at', schema='urban_greening')
    op.drop_column('monitoring_requests', 'sapling_count', schema='urban_greening')
    op.drop_column('monitoring_requests', 'longitude', schema='urban_greening')
    op.drop_column('monitoring_requests', 'created_at', schema='urban_greening')
    op.alter_column('urban_greening_plantings', 'location',
               existing_type=sa.VARCHAR(length=500),
               nullable=False,
               schema='urban_greening')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('urban_greening_plantings', 'location',
               existing_type=sa.VARCHAR(length=500),
               nullable=True,
               schema='urban_greening')
    op.add_column('monitoring_requests', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True), schema='urban_greening')
    op.add_column('monitoring_requests', sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True), schema='urban_greening')
    op.add_column('monitoring_requests', sa.Column('sapling_count', sa.INTEGER(), autoincrement=False, nullable=True), schema='urban_greening')
    op.add_column('monitoring_requests', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True), schema='urban_greening')
    op.add_column('monitoring_requests', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True), schema='urban_greening')
    op.add_column('monitoring_requests', sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True), schema='urban_greening')
    op.drop_index(op.f('ix_urban_greening_monitoring_requests_id'), table_name='monitoring_requests', schema='urban_greening')
    op.alter_column('monitoring_requests', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               schema='urban_greening')
    op.create_table_comment(
        'fee_records',
        'Fee records for urban greening activities including permits and violations',
        existing_comment=None,
        schema='urban_greening'
    )
    op.create_index(op.f('idx_urban_greening_fee_reference_number'), 'fee_records', ['reference_number'], unique=False, schema='urban_greening')
    op.create_index(op.f('idx_urban_greening_fee_payer'), 'fee_records', ['payer_name'], unique=False, schema='urban_greening')
    op.create_index(op.f('idx_urban_greening_fee_due_date'), 'fee_records', ['due_date'], unique=False, schema='urban_greening')
    op.alter_column('fee_records', 'payment_date',
               existing_type=sa.DATE(),
               comment='Date when the fee was actually paid',
               existing_nullable=True,
               schema='urban_greening')
    op.alter_column('fee_records', 'or_number',
               existing_type=sa.VARCHAR(length=50),
               comment='Official Receipt number (when paid)',
               existing_nullable=True,
               schema='urban_greening')
    op.alter_column('fee_records', 'status',
               existing_type=sa.VARCHAR(length=50),
               comment='Payment status: paid, pending, overdue, cancelled',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'due_date',
               existing_type=sa.DATE(),
               comment='Date when the fee payment is due',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'date',
               existing_type=sa.DATE(),
               comment='Date when the fee was issued',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'payer_name',
               existing_type=sa.VARCHAR(length=255),
               comment='Name of the person or entity paying the fee',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'amount',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment='Fee amount in currency units',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'type',
               existing_type=sa.VARCHAR(length=50),
               comment='Type of fee: cutting_permit, pruning_permit, violation_fine',
               existing_nullable=False,
               schema='urban_greening')
    op.alter_column('fee_records', 'reference_number',
               existing_type=sa.VARCHAR(length=50),
               comment='Unique reference number for the fee record',
               existing_nullable=False,
               schema='urban_greening')
    op.drop_constraint(None, 'vehicles', schema='emission', type_='unique')
    op.create_index(op.f('vehicles_plate_number_key'), 'vehicles', ['plate_number'], unique=True, schema='emission')
    op.alter_column('vehicles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicle_driver_history', 'changed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('tests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('tests', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('test_schedules', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('test_schedules', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.drop_index(op.f('ix_emission_air_quality_fees_fee_id'), table_name='air_quality_fees', schema='emission')
    op.create_index(op.f('ix_emission_air_quality_fees_fee_id'), 'air_quality_fees', ['fee_id'], unique=True, schema='emission')
    op.drop_index(op.f('ix_auth_users_email'), table_name='users', schema='auth')
    op.create_index(op.f('users_email_key'), 'users', ['email'], unique=True, schema='auth')
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.drop_constraint('uq_user_roles_user_id_role', 'user_roles', schema='auth', type_='unique')
    op.create_index(op.f('user_roles_user_id_role_unique'), 'user_roles', ['user_id', 'role'], unique=True, schema='auth')
    op.alter_column('user_roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('user_roles', 'role',
               existing_type=sa.Enum('admin', 'air_quality', 'tree_management', 'government_emission', name='user_role_enum_auth', schema='auth'),
               type_=postgresql.ENUM('admin', 'air_quality', 'tree_management', 'government_emission', name='user_role', schema='auth'),
               existing_nullable=False,
               schema='auth')
    op.drop_constraint(None, 'profiles', schema='auth', type_='unique')
    op.create_index(op.f('profiles_user_id_key'), 'profiles', ['user_id'], unique=True, schema='auth')
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('profiles', 'bio',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='auth')
    op.drop_index('idx_urban_greening_project_type', table_name='urban_greening_projects', schema='urban_greening')
    op.drop_index('idx_urban_greening_project_status', table_name='urban_greening_projects', schema='urban_greening')
    op.drop_index('idx_urban_greening_project_date', table_name='urban_greening_projects', schema='urban_greening')
    op.drop_table('urban_greening_projects', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_species', table_name='tree_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_condition', table_name='tree_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_action', table_name='tree_records', schema='urban_greening')
    op.drop_table('tree_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_species', table_name='sapling_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_source', table_name='sapling_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_condition', table_name='sapling_records', schema='urban_greening')
    op.drop_table('sapling_records', schema='urban_greening')
    op.drop_index('idx_air_quality_oop_plate', table_name='order_of_payments', schema='air_quality')
    op.drop_index('idx_air_quality_oop_date', table_name='order_of_payments', schema='air_quality')
    op.drop_index('idx_air_quality_oop_control_number', table_name='order_of_payments', schema='air_quality')
    op.drop_table('order_of_payments', schema='air_quality')
    # ### end Alembic commands ###
