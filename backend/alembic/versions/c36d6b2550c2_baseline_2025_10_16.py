"""baseline 2025-10-16

Revision ID: c36d6b2550c2
Revises: 
Create Date: 2025-10-16 07:30:16.557546

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c36d6b2550c2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('drivers',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('middle_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('license_number', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('license_number'),
    schema='air_quality'
    )
    op.create_index('idx_air_quality_drivers_license', 'drivers', ['license_number'], unique=False, schema='air_quality')
    op.create_index('idx_air_quality_drivers_name', 'drivers', ['last_name', 'first_name'], unique=False, schema='air_quality')
    op.create_table('fees',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('level', sa.Integer(), server_default='1', nullable=True),
    sa.Column('effective_date', sa.Date(), server_default=sa.text('CURRENT_DATE'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='air_quality'
    )
    op.create_table('order_of_payments',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('oop_control_number', sa.String(length=6), nullable=False),
    sa.Column('plate_number', sa.String(length=32), nullable=False),
    sa.Column('operator_name', sa.String(length=200), nullable=False),
    sa.Column('driver_name', sa.String(length=200), nullable=True),
    sa.Column('selected_violations', sa.String(), nullable=False),
    sa.Column('testing_officer', sa.String(length=200), nullable=True),
    sa.Column('test_results', sa.String(), nullable=True),
    sa.Column('date_of_testing', sa.Date(), nullable=True),
    sa.Column('apprehension_fee', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('voluntary_fee', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('impound_fee', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('driver_amount', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('operator_fee', sa.Numeric(precision=10, scale=2), server_default='0', nullable=True),
    sa.Column('total_undisclosed_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('grand_total_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('payment_or_number', sa.String(length=64), nullable=True),
    sa.Column('date_of_payment', sa.Date(), nullable=False),
    sa.Column('status', sa.String(length=32), server_default='unpaid', nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('oop_control_number'),
    schema='air_quality'
    )
    op.create_index('idx_air_quality_oop_control_number', 'order_of_payments', ['oop_control_number'], unique=False, schema='air_quality')
    op.create_index('idx_air_quality_oop_date', 'order_of_payments', ['date_of_payment'], unique=False, schema='air_quality')
    op.create_index('idx_air_quality_oop_plate', 'order_of_payments', ['plate_number'], unique=False, schema='air_quality')
    op.create_table('records',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('plate_number', sa.String(length=32), nullable=False),
    sa.Column('vehicle_type', sa.String(length=64), nullable=False),
    sa.Column('transport_group', sa.String(length=100), nullable=True),
    sa.Column('operator_company_name', sa.String(length=200), nullable=False),
    sa.Column('operator_address', sa.String(), nullable=True),
    sa.Column('owner_first_name', sa.String(length=100), nullable=True),
    sa.Column('owner_middle_name', sa.String(length=100), nullable=True),
    sa.Column('owner_last_name', sa.String(length=100), nullable=True),
    sa.Column('motor_no', sa.String(length=100), nullable=True),
    sa.Column('motor_vehicle_name', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='air_quality'
    )
    op.create_index('idx_air_quality_records_operator', 'records', ['operator_company_name'], unique=False, schema='air_quality')
    op.create_index('idx_air_quality_records_plate', 'records', ['plate_number'], unique=False, schema='air_quality')
    op.create_table('failed_logins',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('failure_reason', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='auth'
    )
    op.create_index('idx_auth_failed_logins_created_at', 'failed_logins', ['created_at'], unique=False, schema='auth')
    op.create_index('idx_auth_failed_logins_email', 'failed_logins', ['email'], unique=False, schema='auth')
    op.create_index('idx_auth_failed_logins_ip_address', 'failed_logins', ['ip_address'], unique=False, schema='auth')
    op.create_table('users',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('encrypted_password', sa.String(length=255), nullable=False),
    sa.Column('is_super_admin', sa.Boolean(), server_default='false', nullable=True),
    sa.Column('last_sign_in_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='auth'
    )
    op.create_index(op.f('ix_auth_users_email'), 'users', ['email'], unique=True, schema='auth')
    op.create_table('air_quality_fees',
    sa.Column('fee_id', sa.String(), nullable=False),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('rate', sa.Integer(), nullable=False),
    sa.Column('date_effective', sa.Date(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('fee_id'),
    schema='emission'
    )
    op.create_index(op.f('ix_emission_air_quality_fees_fee_id'), 'air_quality_fees', ['fee_id'], unique=False, schema='emission')
    op.create_table('offices',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('address', sa.String(length=500), nullable=True),
    sa.Column('contact_number', sa.String(length=50), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='emission'
    )
    op.create_table('test_schedules',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('assigned_personnel', sa.String(length=255), nullable=False),
    sa.Column('conducted_on', sa.DateTime(timezone=True), nullable=False),
    sa.Column('location', sa.String(length=255), nullable=False),
    sa.Column('quarter', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='emission'
    )
    op.create_index('idx_test_schedule_year_quarter', 'test_schedules', ['year', 'quarter'], unique=False, schema='emission')
    op.create_table('fee_records',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('reference_number', sa.String(length=50), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('payer_name', sa.String(length=255), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('due_date', sa.Date(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('or_number', sa.String(length=50), nullable=True),
    sa.Column('payment_date', sa.Date(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('reference_number'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_fee_date', 'fee_records', ['date'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_fee_status', 'fee_records', ['status'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_fee_type', 'fee_records', ['type'], unique=False, schema='urban_greening')
    op.create_table('monitoring_requests',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('requester_name', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_type', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='urban_greening'
    )
    op.create_index(op.f('ix_urban_greening_monitoring_requests_id'), 'monitoring_requests', ['id'], unique=False, schema='urban_greening')
    op.create_table('sapling_collections',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('collection_number', sa.String(length=50), nullable=False),
    sa.Column('species_name', sa.String(length=255), nullable=False),
    sa.Column('quantity_collected', sa.Integer(), nullable=False),
    sa.Column('collection_date', sa.Date(), nullable=False),
    sa.Column('collection_location', sa.String(length=500), nullable=False),
    sa.Column('collector_name', sa.String(length=255), nullable=False),
    sa.Column('collector_contact', sa.String(length=50), nullable=True),
    sa.Column('purpose', sa.String(length=100), nullable=False),
    sa.Column('target_planting_date', sa.Date(), nullable=True),
    sa.Column('target_location', sa.String(length=500), nullable=True),
    sa.Column('nursery_location', sa.String(length=500), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('health_condition', sa.String(length=50), nullable=True),
    sa.Column('size_category', sa.String(length=50), nullable=True),
    sa.Column('survival_rate', sa.Float(), nullable=True),
    sa.Column('distribution_date', sa.Date(), nullable=True),
    sa.Column('recipient_name', sa.String(length=255), nullable=True),
    sa.Column('recipient_contact', sa.String(length=50), nullable=True),
    sa.Column('recipient_address', sa.String(length=500), nullable=True),
    sa.Column('care_instructions', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('photos', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('collection_number'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_sapling_collection_date', 'sapling_collections', ['collection_date'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_sapling_purpose', 'sapling_collections', ['purpose'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_sapling_species', 'sapling_collections', ['species_name'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_sapling_status', 'sapling_collections', ['status'], unique=False, schema='urban_greening')
    op.create_table('sapling_records',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('species', sa.String(length=100), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('collection_date', sa.Date(), nullable=False),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.Column('condition', sa.String(length=50), nullable=False),
    sa.Column('planting_date', sa.Date(), nullable=True),
    sa.Column('location', sa.String(length=500), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_sapling_condition', 'sapling_records', ['condition'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_sapling_source', 'sapling_records', ['source'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_sapling_record_species', 'sapling_records', ['species'], unique=False, schema='urban_greening')
    op.create_table('sapling_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('date_received', sa.Date(), nullable=False),
    sa.Column('requester_name', sa.String(length=255), nullable=False),
    sa.Column('address', sa.String(length=500), nullable=False),
    sa.Column('saplings', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_sapling_request_date_received', 'sapling_requests', ['date_received'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_sapling_request_requester', 'sapling_requests', ['requester_name'], unique=False, schema='urban_greening')
    op.create_table('tree_management_requests',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('request_number', sa.String(length=50), nullable=False),
    sa.Column('request_type', sa.String(length=50), nullable=False),
    sa.Column('requester_name', sa.String(length=255), nullable=False),
    sa.Column('property_address', sa.Text(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('request_date', sa.Date(), nullable=False),
    sa.Column('fee_record_id', sa.UUID(), nullable=True),
    sa.Column('inspectors', sa.Text(), nullable=True),
    sa.Column('trees_and_quantities', sa.Text(), nullable=True),
    sa.Column('picture_links', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('monitoring_request_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_number'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_tree_request_date', 'tree_management_requests', ['request_date'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_tree_request_number', 'tree_management_requests', ['request_number'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_tree_request_status', 'tree_management_requests', ['status'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_tree_request_type', 'tree_management_requests', ['request_type'], unique=False, schema='urban_greening')
    op.create_table('tree_records',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('species', sa.String(length=100), nullable=False),
    sa.Column('location', sa.String(length=500), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('diameter', sa.Integer(), nullable=False),
    sa.Column('height', sa.Float(), nullable=False),
    sa.Column('condition', sa.String(length=50), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('permit_number', sa.String(length=50), nullable=True),
    sa.Column('action_date', sa.Date(), nullable=True),
    sa.Column('replacement_required', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_tree_action', 'tree_records', ['action'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_tree_condition', 'tree_records', ['condition'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_tree_species', 'tree_records', ['species'], unique=False, schema='urban_greening')
    op.create_table('urban_greening_plantings',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('record_number', sa.String(length=50), nullable=False),
    sa.Column('planting_type', sa.String(length=50), nullable=False),
    sa.Column('species_name', sa.String(length=255), nullable=False),
    sa.Column('quantity_planted', sa.Integer(), nullable=False),
    sa.Column('planting_date', sa.Date(), nullable=False),
    sa.Column('location', sa.String(length=500), nullable=False),
    sa.Column('barangay', sa.String(length=100), nullable=True),
    sa.Column('coordinates', sa.String(length=100), nullable=True),
    sa.Column('planting_method', sa.String(length=100), nullable=True),
    sa.Column('plants', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('survival_rate', sa.Float(), nullable=True),
    sa.Column('responsible_person', sa.String(length=255), nullable=False),
    sa.Column('contact_number', sa.String(length=50), nullable=True),
    sa.Column('organization', sa.String(length=255), nullable=True),
    sa.Column('project_name', sa.String(length=255), nullable=True),
    sa.Column('funding_source', sa.String(length=255), nullable=True),
    sa.Column('maintenance_schedule', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('photos', sa.Text(), nullable=True),
    sa.Column('monitoring_request_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('record_number'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_planting_date', 'urban_greening_plantings', ['planting_date'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_planting_location', 'urban_greening_plantings', ['location'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_planting_status', 'urban_greening_plantings', ['status'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_planting_type', 'urban_greening_plantings', ['planting_type'], unique=False, schema='urban_greening')
    op.create_table('urban_greening_projects',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('project_name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('species', sa.String(length=255), nullable=False),
    sa.Column('planting_date', sa.Date(), nullable=False),
    sa.Column('location', sa.String(length=500), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('responsible_person', sa.String(length=255), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='urban_greening'
    )
    op.create_index('idx_urban_greening_project_date', 'urban_greening_projects', ['planting_date'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_project_status', 'urban_greening_projects', ['status'], unique=False, schema='urban_greening')
    op.create_index('idx_urban_greening_project_type', 'urban_greening_projects', ['type'], unique=False, schema='urban_greening')
    op.create_table('record_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=64), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('details', sa.String(), nullable=True),
    sa.Column('or_number', sa.String(length=64), nullable=True),
    sa.Column('status', sa.String(length=32), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['record_id'], ['air_quality.records.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='air_quality'
    )
    op.create_index('idx_air_quality_record_history_date', 'record_history', ['date'], unique=False, schema='air_quality')
    op.create_index('idx_air_quality_record_history_record', 'record_history', ['record_id'], unique=False, schema='air_quality')
    op.create_table('violations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=False),
    sa.Column('ordinance_infraction_report_no', sa.String(length=100), nullable=True),
    sa.Column('smoke_density_test_result_no', sa.String(length=100), nullable=True),
    sa.Column('place_of_apprehension', sa.String(length=200), nullable=False),
    sa.Column('date_of_apprehension', sa.Date(), nullable=False),
    sa.Column('paid_driver', sa.Boolean(), server_default='false', nullable=True),
    sa.Column('paid_operator', sa.Boolean(), server_default='false', nullable=True),
    sa.Column('driver_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['air_quality.drivers.id'], ),
    sa.ForeignKeyConstraint(['record_id'], ['air_quality.records.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='air_quality'
    )
    op.create_index('idx_air_quality_violations_date', 'violations', ['date_of_apprehension'], unique=False, schema='air_quality')
    op.create_index('idx_air_quality_violations_record', 'violations', ['record_id'], unique=False, schema='air_quality')
    op.create_table('activity_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('activity_type', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('extra_data', sa.Text(), nullable=True),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    schema='auth'
    )
    op.create_index('idx_auth_activity_logs_activity_type', 'activity_logs', ['activity_type'], unique=False, schema='auth')
    op.create_index('idx_auth_activity_logs_created_at', 'activity_logs', ['created_at'], unique=False, schema='auth')
    op.create_index('idx_auth_activity_logs_user_id', 'activity_logs', ['user_id'], unique=False, schema='auth')
    op.create_table('profiles',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('bio', sa.String(), nullable=True),
    sa.Column('job_title', sa.String(length=200), nullable=True),
    sa.Column('department', sa.String(length=200), nullable=True),
    sa.Column('phone_number', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id'),
    schema='auth'
    )
    op.create_index('idx_auth_profiles_user_id', 'profiles', ['user_id'], unique=False, schema='auth')
    op.create_table('user_roles',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.Enum('admin', 'air_quality', 'tree_management', 'government_emission', name='user_role', schema='auth'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'role', name='uq_user_roles_user_id_role'),
    schema='auth'
    )
    op.create_index('idx_auth_user_roles_user_id', 'user_roles', ['user_id'], unique=False, schema='auth')
    op.create_table('user_sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_token', sa.String(length=255), nullable=False),
    sa.Column('ip_address', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ended_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_token'),
    schema='auth'
    )
    op.create_index('idx_auth_user_sessions_created_at', 'user_sessions', ['created_at'], unique=False, schema='auth')
    op.create_index('idx_auth_user_sessions_user_id', 'user_sessions', ['user_id'], unique=False, schema='auth')
    op.create_table('vehicles',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('driver_name', sa.String(length=255), nullable=False),
    sa.Column('contact_number', sa.String(length=50), nullable=True),
    sa.Column('engine_type', sa.String(length=100), nullable=False),
    sa.Column('office_id', sa.UUID(), nullable=False),
    sa.Column('plate_number', sa.String(length=50), nullable=False),
    sa.Column('vehicle_type', sa.String(length=100), nullable=False),
    sa.Column('wheels', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['office_id'], ['emission.offices.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('plate_number'),
    schema='emission'
    )
    op.create_table('tests',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('test_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('quarter', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('result', sa.Boolean(), nullable=False),
    sa.Column('remarks', sa.String(length=500), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['auth.users.id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['emission.vehicles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='emission'
    )
    op.create_index('idx_test_vehicle_id', 'tests', ['vehicle_id'], unique=False, schema='emission')
    op.create_index('idx_test_year_quarter', 'tests', ['year', 'quarter'], unique=False, schema='emission')
    op.create_table('vehicle_driver_history',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('driver_name', sa.String(length=255), nullable=False),
    sa.Column('changed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('changed_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['changed_by'], ['auth.users.id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['emission.vehicles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='emission'
    )
    op.create_index('idx_vehicle_driver_history_vehicle_id', 'vehicle_driver_history', ['vehicle_id'], unique=False, schema='emission')
    op.create_table('vehicle_remarks',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('vehicle_id', sa.UUID(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('remarks', sa.String(length=1000), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['auth.users.id'], ),
    sa.ForeignKeyConstraint(['vehicle_id'], ['emission.vehicles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='emission'
    )
    op.create_index('idx_vehicle_remarks_vehicle_year', 'vehicle_remarks', ['vehicle_id', 'year'], unique=False, schema='emission')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_vehicle_remarks_vehicle_year', table_name='vehicle_remarks', schema='emission')
    op.drop_table('vehicle_remarks', schema='emission')
    op.drop_index('idx_vehicle_driver_history_vehicle_id', table_name='vehicle_driver_history', schema='emission')
    op.drop_table('vehicle_driver_history', schema='emission')
    op.drop_index('idx_test_year_quarter', table_name='tests', schema='emission')
    op.drop_index('idx_test_vehicle_id', table_name='tests', schema='emission')
    op.drop_table('tests', schema='emission')
    op.drop_table('vehicles', schema='emission')
    op.drop_index('idx_auth_user_sessions_user_id', table_name='user_sessions', schema='auth')
    op.drop_index('idx_auth_user_sessions_created_at', table_name='user_sessions', schema='auth')
    op.drop_table('user_sessions', schema='auth')
    op.drop_index('idx_auth_user_roles_user_id', table_name='user_roles', schema='auth')
    op.drop_table('user_roles', schema='auth')
    op.drop_index('idx_auth_profiles_user_id', table_name='profiles', schema='auth')
    op.drop_table('profiles', schema='auth')
    op.drop_index('idx_auth_activity_logs_user_id', table_name='activity_logs', schema='auth')
    op.drop_index('idx_auth_activity_logs_created_at', table_name='activity_logs', schema='auth')
    op.drop_index('idx_auth_activity_logs_activity_type', table_name='activity_logs', schema='auth')
    op.drop_table('activity_logs', schema='auth')
    op.drop_index('idx_air_quality_violations_record', table_name='violations', schema='air_quality')
    op.drop_index('idx_air_quality_violations_date', table_name='violations', schema='air_quality')
    op.drop_table('violations', schema='air_quality')
    op.drop_index('idx_air_quality_record_history_record', table_name='record_history', schema='air_quality')
    op.drop_index('idx_air_quality_record_history_date', table_name='record_history', schema='air_quality')
    op.drop_table('record_history', schema='air_quality')
    op.drop_index('idx_urban_greening_project_type', table_name='urban_greening_projects', schema='urban_greening')
    op.drop_index('idx_urban_greening_project_status', table_name='urban_greening_projects', schema='urban_greening')
    op.drop_index('idx_urban_greening_project_date', table_name='urban_greening_projects', schema='urban_greening')
    op.drop_table('urban_greening_projects', schema='urban_greening')
    op.drop_index('idx_urban_greening_planting_type', table_name='urban_greening_plantings', schema='urban_greening')
    op.drop_index('idx_urban_greening_planting_status', table_name='urban_greening_plantings', schema='urban_greening')
    op.drop_index('idx_urban_greening_planting_location', table_name='urban_greening_plantings', schema='urban_greening')
    op.drop_index('idx_urban_greening_planting_date', table_name='urban_greening_plantings', schema='urban_greening')
    op.drop_table('urban_greening_plantings', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_species', table_name='tree_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_condition', table_name='tree_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_action', table_name='tree_records', schema='urban_greening')
    op.drop_table('tree_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_request_type', table_name='tree_management_requests', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_request_status', table_name='tree_management_requests', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_request_number', table_name='tree_management_requests', schema='urban_greening')
    op.drop_index('idx_urban_greening_tree_request_date', table_name='tree_management_requests', schema='urban_greening')
    op.drop_table('tree_management_requests', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_request_requester', table_name='sapling_requests', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_request_date_received', table_name='sapling_requests', schema='urban_greening')
    op.drop_table('sapling_requests', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_record_species', table_name='sapling_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_source', table_name='sapling_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_condition', table_name='sapling_records', schema='urban_greening')
    op.drop_table('sapling_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_status', table_name='sapling_collections', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_species', table_name='sapling_collections', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_purpose', table_name='sapling_collections', schema='urban_greening')
    op.drop_index('idx_urban_greening_sapling_collection_date', table_name='sapling_collections', schema='urban_greening')
    op.drop_table('sapling_collections', schema='urban_greening')
    op.drop_index(op.f('ix_urban_greening_monitoring_requests_id'), table_name='monitoring_requests', schema='urban_greening')
    op.drop_table('monitoring_requests', schema='urban_greening')
    op.drop_index('idx_urban_greening_fee_type', table_name='fee_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_fee_status', table_name='fee_records', schema='urban_greening')
    op.drop_index('idx_urban_greening_fee_date', table_name='fee_records', schema='urban_greening')
    op.drop_table('fee_records', schema='urban_greening')
    op.drop_index('idx_test_schedule_year_quarter', table_name='test_schedules', schema='emission')
    op.drop_table('test_schedules', schema='emission')
    op.drop_table('offices', schema='emission')
    op.drop_index(op.f('ix_emission_air_quality_fees_fee_id'), table_name='air_quality_fees', schema='emission')
    op.drop_table('air_quality_fees', schema='emission')
    op.drop_index(op.f('ix_auth_users_email'), table_name='users', schema='auth')
    op.drop_table('users', schema='auth')
    op.drop_index('idx_auth_failed_logins_ip_address', table_name='failed_logins', schema='auth')
    op.drop_index('idx_auth_failed_logins_email', table_name='failed_logins', schema='auth')
    op.drop_index('idx_auth_failed_logins_created_at', table_name='failed_logins', schema='auth')
    op.drop_table('failed_logins', schema='auth')
    op.drop_index('idx_air_quality_records_plate', table_name='records', schema='air_quality')
    op.drop_index('idx_air_quality_records_operator', table_name='records', schema='air_quality')
    op.drop_table('records', schema='air_quality')
    op.drop_index('idx_air_quality_oop_plate', table_name='order_of_payments', schema='air_quality')
    op.drop_index('idx_air_quality_oop_date', table_name='order_of_payments', schema='air_quality')
    op.drop_index('idx_air_quality_oop_control_number', table_name='order_of_payments', schema='air_quality')
    op.drop_table('order_of_payments', schema='air_quality')
    op.drop_table('fees', schema='air_quality')
    op.drop_index('idx_air_quality_drivers_name', table_name='drivers', schema='air_quality')
    op.drop_index('idx_air_quality_drivers_license', table_name='drivers', schema='air_quality')
    op.drop_table('drivers', schema='air_quality')
    # ### end Alembic commands ###
