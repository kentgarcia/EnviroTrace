"""ensure test schedule table structure

Revision ID: 1f265f21f0c3
Revises: 98b0253214e3
Create Date: 2025-07-18 15:28:25.120010

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1f265f21f0c3'
down_revision: Union[str, None] = '98b0253214e3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_emission_air_quality_fees_fee_id'), table_name='air_quality_fees', schema='emission')
    op.drop_table('air_quality_fees', schema='emission')
    op.alter_column('profiles', 'bio',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='auth')
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.drop_index(op.f('profiles_user_id_key'), table_name='profiles', schema='auth')
    op.create_unique_constraint(None, 'profiles', ['user_id'], schema='auth')
    op.alter_column('user_roles', 'role',
               existing_type=postgresql.ENUM('admin', 'air_quality', 'tree_management', 'government_emission', name='user_role', schema='auth'),
               type_=sa.Enum('admin', 'air_quality', 'tree_management', 'government_emission', name='user_role_enum_auth', schema='auth'),
               existing_nullable=False,
               schema='auth')
    op.alter_column('user_roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.drop_index(op.f('user_roles_user_id_role_unique'), table_name='user_roles', schema='auth')
    op.create_unique_constraint('uq_user_roles_user_id_role', 'user_roles', ['user_id', 'role'], schema='auth')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.drop_index(op.f('users_email_key'), table_name='users', schema='auth')
    op.create_index(op.f('ix_auth_users_email'), 'users', ['email'], unique=True, schema='auth')
    op.alter_column('drivers', 'address',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               schema='belching')
    op.drop_index(op.f('drivers_license_number_key'), table_name='drivers', schema='belching')
    op.create_unique_constraint(None, 'drivers', ['license_number'], schema='belching')
    op.alter_column('fees', 'level',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('1'),
               schema='belching')
    op.alter_column('fees', 'effective_date',
               existing_type=sa.DATE(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_DATE'),
               schema='belching')
    op.alter_column('record_history', 'details',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='belching')
    op.alter_column('records', 'operator_address',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               schema='belching')
    op.drop_constraint(op.f('fk_belching_violations_driver'), 'violations', schema='belching', type_='foreignkey')
    op.create_foreign_key(None, 'violations', 'drivers', ['driver_id'], ['id'], source_schema='belching', referent_schema='belching')
    op.alter_column('test_schedules', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('test_schedules', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('tests', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('tests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicle_driver_history', 'changed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.drop_index(op.f('vehicles_plate_number_key'), table_name='vehicles', schema='emission')
    op.create_unique_constraint(None, 'vehicles', ['plate_number'], schema='emission')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'vehicles', schema='emission', type_='unique')
    op.create_index(op.f('vehicles_plate_number_key'), 'vehicles', ['plate_number'], unique=True, schema='emission')
    op.alter_column('vehicles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('vehicle_driver_history', 'changed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('tests', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('tests', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('test_schedules', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.alter_column('test_schedules', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='emission')
    op.drop_constraint(None, 'violations', schema='belching', type_='foreignkey')
    op.create_foreign_key(op.f('fk_belching_violations_driver'), 'violations', 'drivers', ['driver_id'], ['id'], source_schema='belching', referent_schema='belching', ondelete='SET NULL')
    op.alter_column('records', 'operator_address',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='belching')
    op.alter_column('record_history', 'details',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='belching')
    op.alter_column('fees', 'effective_date',
               existing_type=sa.DATE(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_DATE'),
               schema='belching')
    op.alter_column('fees', 'level',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('1'),
               schema='belching')
    op.drop_constraint(None, 'drivers', schema='belching', type_='unique')
    op.create_index(op.f('drivers_license_number_key'), 'drivers', ['license_number'], unique=True, schema='belching')
    op.alter_column('drivers', 'address',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               schema='belching')
    op.drop_index(op.f('ix_auth_users_email'), table_name='users', schema='auth')
    op.create_index(op.f('users_email_key'), 'users', ['email'], unique=True, schema='auth')
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.drop_constraint('uq_user_roles_user_id_role', 'user_roles', schema='auth', type_='unique')
    op.create_index(op.f('user_roles_user_id_role_unique'), 'user_roles', ['user_id', 'role'], unique=True, schema='auth')
    op.alter_column('user_roles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('user_roles', 'role',
               existing_type=sa.Enum('admin', 'air_quality', 'tree_management', 'government_emission', name='user_role_enum_auth', schema='auth'),
               type_=postgresql.ENUM('admin', 'air_quality', 'tree_management', 'government_emission', name='user_role', schema='auth'),
               existing_nullable=False,
               schema='auth')
    op.drop_constraint(None, 'profiles', schema='auth', type_='unique')
    op.create_index(op.f('profiles_user_id_key'), 'profiles', ['user_id'], unique=True, schema='auth')
    op.alter_column('profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True, precision=6),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'),
               schema='auth')
    op.alter_column('profiles', 'bio',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               schema='auth')
    op.create_table('air_quality_fees',
    sa.Column('fee_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('level', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('rate', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date_effective', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('offense_level', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('fee_id', name=op.f('air_quality_fees_pkey')),
    schema='emission'
    )
    op.create_index(op.f('ix_emission_air_quality_fees_fee_id'), 'air_quality_fees', ['fee_id'], unique=False, schema='emission')
    # ### end Alembic commands ###
